#!/bin/bash

# Utiler√≠as generales para el trading bot
# Uso: ./trading_utils.sh [command] [options]

# Colores para output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuraci√≥n
SERVER_PORT=8200
STM_PORT=8100

# Header del script
show_header() {
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                    ü§ñ TRADING BOT UTILS ü§ñ                     ‚ïë${NC}"
    echo -e "${CYAN}‚ïë                 Gesti√≥n R√°pida del Sistema                    ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# Funci√≥n para mostrar ayuda general
show_help() {
    echo -e "${YELLOW}üìã Comandos disponibles:${NC}"
    echo ""
    echo -e "${GREEN}üîç MONITOREO:${NC}"
    echo -e "  ${CYAN}status${NC}           # Estado general del sistema"
    echo -e "  ${CYAN}refresh${NC}          # Recargar datos en tiempo real"
    echo -e "  ${CYAN}logs${NC}             # Ver logs recientes"
    echo ""
    echo -e "${GREEN}‚ö° CONTROL DE PROCESOS:${NC}"
    echo -e "  ${CYAN}start${NC}            # Iniciar servidor y STM"
    echo -e "  ${CYAN}stop${NC}             # Detener servidor y STM"
    echo -e "  ${CYAN}restart${NC}          # Reiniciar todo el sistema"
    echo ""
    echo -e "${GREEN}üåê VERIFICACI√ìN DE CONECTIVIDAD:${NC}"
    echo -e "  ${CYAN}health${NC}           # Verificar salud de servicios"
    echo -e "  ${CYAN}connectivity${NC}    # Verificar conectividad con Binance"
    echo ""
    echo -e "${GREEN}üõ†Ô∏è  MANTENIMIENTO:${NC}"
    echo -e "  ${CYAN}reset${NC}            # Reset completo del sistema"
    echo -e "  ${CYAN}clean${NC}           # Limpiar logs antiguos"
    echo -e "  ${CYAN}repair${NC}          # Reparar conexiones WebSocket"
    echo ""
    echo -e "${YELLOW}üìñ M√°s comandos espec√≠ficos:${NC}"
    echo -e "  ${CYAN}trading_utils.sh help [comando]${NC} - Ayuda espec√≠fica"
    echo ""
}

# Funci√≥n para mostrar estado general
show_status() {
    echo -e "${BLUE}üìä ESTADO GENERAL DEL SISTEMA${NC}"
    echo "=================================================="
    
    # Verificar procesos  
    SERVER_PIDS=$(pgrep -u "$USER" -f "backend.v0_2.server.app" 2>/dev/null || true)
    STM_PIDS=$(pgrep -u "$USER" -f "backend.v0_2.stm.app" 2>/dev/null || true)
    
    if [ ! -z "$SERVER_PIDS" ]; then
        echo -e "üñ•Ô∏è  ${GREEN}Servidor: CORRIENDO${NC} (PID: $SERVER_PIDS)"
    else
        echo -e "üñ•Ô∏è  ${RED}Servidor: DETENIDO${NC}"
    fi
    
    if [ ! -z "$STM_PIDS" ]; then
        echo -e "üíπ ${GREEN}STM: CORRIENDO${NC} (PID: $STM_PIDS)"
    else
        echo -e "üíπ ${RED}STM: DETENIDO${NC}"
    fi
    
    echo ""
    
    # Verificar puertos
    echo -e "${BLUE}üîå ESTADO DE PUERTOS:${NC}"
    if lsof -i :$SERVER_PORT >/dev/null 2>&1; then
        echo -e "   Puerto $SERVER_PORT: ${RED}OCUPADO${NC}"
    else
        echo -e "   Puerto $SERVER_PORT: ${GREEN}LIBRE${NC}"
    fi
    
    if lsof -i :$STM_PORT >/dev/null 2>&1; then
        echo -e "   Puerto $STM_PORT: ${RED}OCUPADO${NC}"
    else
        echo -e "   Puerto $STM_PORT: ${GREEN}LIBRE${NC}"
    fi
    
    echo ""
}

# Funci√≥n para verificar salud
check_health() {
    echo -e "${BLUE}üè• VERIFICANDO SALUD DE SERVICIOS${NC}"
    echo "=========================================="
    
    # Verificar STM
    echo -e "${YELLOW}üî∏ Verificando STM (Puerto $STM_PORT)...${NC}"
    if curl -s http://localhost:$STM_PORT/health >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ STM: Saludable${NC}"
        # Mostrar respuesta detallada
        echo -e "${CYAN}üìÑ Respuesta del STM:${NC}"
        curl -s http://localhost:$STM_PORT/health | jq . 2>/dev/null || curl -s http://localhost:$STM_PORT/health
    else
        echo -e "${RED}‚ùå STM: No responde${NC}"
    fi
    echo ""
    
    # Verificar Server
    echo -e "${YELLOW}üî∏ Verificando Server (Puerto $SERVER_PORT)...${NC}"
    if curl -s http://localhost:$SERVER_PORT/health >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Server: Saludable${NC}"
        # Mostrar respuesta detallada
        echo -e "${CYAN}üìÑ Respuesta del Server:${NC}"
        curl -s http://localhost:$SERVER_PORT/health | jq . 2>/dev/null || curl -s http://localhost:$SERVER_PORT/health
    else
        echo -e "${RED}‚ùå Server: No responde${NC}"
    fi
    echo ""
}

# Funci√≥n para verificar conectividad con Binance
check_connectivity() {
    echo -e "${BLUE}üåê VERIFICANDO CONECTIVIDAD CON BINANCE${NC}"
    echo "==============================================="
    
    echo -e "${YELLOW}üî∏ Verificando conexi√≥n REST a Binance...${NC}"
    if curl -s -o /dev/null -w "%{http_code}" "https://api.binance.com/api/v3/ping" | grep -q "200"; then
        echo -e "${GREEN}‚úÖ Conexi√≥n REST: OK${NC}"
    else
        echo -e "${RED}‚ùå Conexi√≥n REST: FALLO${NC}"
    fi
    
    echo -e "${YELLOW}üî∏ Verificando precio DOGEUSDT...${NC}"
    DOGE_PRICE=$(curl -s "https://api.binance.com/api/v3/ticker/price?symbol=DOGEUSDT" | jq -r '.price' 2>/dev/null || echo "N/A")
    if [ "$DOGE_PRICE" != "N/A" ] && [ "$DOGE_PRICE" != "null" ]; then
        echo -e "${GREEN}‚úÖ Precio DOGEUSDT: $DOGE_PRICE${NC}"
    else
        echo -e "${RED}‚ùå No se pudo obtener precio DOGEUSDT${NC}"
    fi
    
    echo ""
}

# Funci√≥n para iniciar servicios
start_services() {
    echo -e "${YELLOW}üöÄ Iniciando servicios del trading bot...${NC}"
    
    # Verificar si ya est√°n corriendo
    SERVER_PIDS=$(pgrep -u "$USER" -f "backend.v0_2.server.app" 2>/dev/null || true)
    STM_PIDS=$(pgrep -u "$USER" -f "backend.v0_2.stm.app" 2>/dev/null || true)
    
    if [ ! -z "$SERVER_PIDS" ] && [ ! -z "$STM_PIDS" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Los servicios ya est√°n corriendo${NC}"
        show_status
        return
    fi
    
    echo -e "${YELLOW}üî∏ Iniciando STM...${NC}"
    ./start_stm_v2.sh &
    
    echo -e "${YELLOW}üî∏ Esperando 3 segundos...${NC}"
    sleep 3
    
    echo -e "${YELLOW}üî∏ Iniciando Server...${NC}"
    ./start_server_v2.sh &
    
    echo -e "${YELLOW}üî∏ Esperando 5 segundos para estabilizaci√≥n...${NC}"
    sleep 5
    
    echo ""
    check_health
}

# Funci√≥n para detener servicios
stop_services() {
    echo -e "${YELLOW}üõë Deteniendo servicios del trading bot...${NC}"
    
    ./kill_processes.sh all
    
    sleep 3
    
    echo ""
    show_status
}

# Funci√≥n para reiniciar servicios
restart_services() {
    echo -e "${YELLOW}üîÑ Reiniciando servicios del trading bot...${NC}"
    
    stop_services
    echo -e "${YELLOW}‚è≥ Esperando 3 segundos antes de reiniciar...${NC}"
    sleep 3
    start_services
}

# Funci√≥n para reset completo
reset_system() {
    echo -e "${RED}‚ö†Ô∏è  RESET COMPLETO DEL SISTEMA${NC}"
    echo -e "${RED}Esta acci√≥n eliminar√° todas las posiciones y datos simulados${NC}"
    echo ""
    read -p "¬øEst√°s seguro? Escribe 'RESET' para confirmar: " confirm
    
    if [ "$confirm" = "RESET" ]; then
        echo -e "${YELLOW}üî∏ Reseteando cuenta sint√©tica...${NC}"
        curl -X POST http://localhost:$STM_PORT/account/synth/reset >/dev/null 2>&1 || true
        
        echo -e "${YELLOW}üî∏ Limpiando datos de posiciones...${NC}"
        curl -X POST http://localhost:$STM_PORT/positions/clean >/dev/null 2>&1 || true
        
        echo -e "${YELLOW}üî∏ Reiniciando servicios...${NC}"
        restart_services
        
        echo -e "${GREEN}‚úÖ Reset completo terminado${NC}"
    else
        echo -e "${RED}‚ùå Reset cancelado${NC}"
    fi
}

# Funci√≥n para mostrar logs recientes
show_logs() {
    echo -e "${BLUE}üìã LOGS RECIENTES DEL SISTEMA${NC}"
    echo "======================================"
    
    echo -e "${YELLOW}üî∏ √öltimas 20 l√≠neas de logs del servidor:${NC}"
    # Buscar logs del servidor en terminales recientes o crear logs si es necesario
    echo "Mostrando logs de la sesi√≥n actual..."
    echo ""
    
    echo -e "${CYAN}üí° Tip: Los logs en tiempo real se muestran en las terminales de STM/Server${NC}"
}

# Main script
main() {
    show_header
    
    case "${1:-help}" in
        "status")
            show_status
            ;;
        "health")
            check_health
            ;;
        "connectivity")
            check_connectivity
            ;;
        "start")
            start_services
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            restart_services
            ;;
        "reset")
            reset_system
            ;;
        "logs")
            show_logs
            ;;
        "clear"|"clean")
            echo -e "${YELLOW}üßπ Limpiando pantalla...${NC}"
            clear
            ;;
        "help"|"-h"|"--help"|"")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Comando desconocido: $1${NC}"
            echo ""
            show_help
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@"
